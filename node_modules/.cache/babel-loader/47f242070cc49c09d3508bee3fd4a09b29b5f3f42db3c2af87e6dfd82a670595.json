{"ast":null,"code":"/**\r\n * A universal utility to style components with multiple color modes. Always use it from the theme object.\r\n * It works with:\r\n *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)\r\n *  - [CSS theme variables](https://mui.com/material-ui/experimental-api/css-theme-variables/overview/)\r\n *  - Zero-runtime engine\r\n *\r\n * Tips: Use an array over object spread and place `theme.applyStyles()` last.\r\n *\r\n * âœ… [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]\r\n *\r\n * ðŸš« { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}\r\n *\r\n * @example\r\n * 1. using with `styled`:\r\n * ```jsx\r\n *   const Component = styled('div')(({ theme }) => [\r\n *     { background: '#e5e5e5' },\r\n *     theme.applyStyles('dark', {\r\n *       background: '#1c1c1c',\r\n *       color: '#fff',\r\n *     }),\r\n *   ]);\r\n * ```\r\n *\r\n * @example\r\n * 2. using with `sx` prop:\r\n * ```jsx\r\n *   <Box sx={theme => [\r\n *     { background: '#e5e5e5' },\r\n *     theme.applyStyles('dark', {\r\n *        background: '#1c1c1c',\r\n *        color: '#fff',\r\n *      }),\r\n *     ]}\r\n *   />\r\n * ```\r\n *\r\n * @example\r\n * 3. theming a component:\r\n * ```jsx\r\n *   extendTheme({\r\n *     components: {\r\n *       MuiButton: {\r\n *         styleOverrides: {\r\n *           root: ({ theme }) => [\r\n *             { background: '#e5e5e5' },\r\n *             theme.applyStyles('dark', {\r\n *               background: '#1c1c1c',\r\n *               color: '#fff',\r\n *             }),\r\n *           ],\r\n *         },\r\n *       }\r\n *     }\r\n *   })\r\n *```\r\n */\nexport default function applyStyles(key, styles) {\n  // @ts-expect-error this is 'any' type\n  const theme = this;\n  if (theme.vars && typeof theme.getColorSchemeSelector === 'function') {\n    // If CssVarsProvider is used as a provider,\n    // returns '* :where([data-mui-color-scheme=\"light|dark\"]) &'\n    const selector = theme.getColorSchemeSelector(key).replace(/(\\[[^\\]]+\\])/, '*:where($1)');\n    return {\n      [selector]: styles\n    };\n  }\n  if (theme.palette.mode === key) {\n    return styles;\n  }\n  return {};\n}","map":{"version":3,"names":["applyStyles","key","styles","theme","vars","getColorSchemeSelector","selector","replace","palette","mode"],"sources":["C:/pft/project-finance-tracker-frontend/node_modules/@mui/system/esm/createTheme/applyStyles.js"],"sourcesContent":["/**\r\n * A universal utility to style components with multiple color modes. Always use it from the theme object.\r\n * It works with:\r\n *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)\r\n *  - [CSS theme variables](https://mui.com/material-ui/experimental-api/css-theme-variables/overview/)\r\n *  - Zero-runtime engine\r\n *\r\n * Tips: Use an array over object spread and place `theme.applyStyles()` last.\r\n *\r\n * âœ… [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]\r\n *\r\n * ðŸš« { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}\r\n *\r\n * @example\r\n * 1. using with `styled`:\r\n * ```jsx\r\n *   const Component = styled('div')(({ theme }) => [\r\n *     { background: '#e5e5e5' },\r\n *     theme.applyStyles('dark', {\r\n *       background: '#1c1c1c',\r\n *       color: '#fff',\r\n *     }),\r\n *   ]);\r\n * ```\r\n *\r\n * @example\r\n * 2. using with `sx` prop:\r\n * ```jsx\r\n *   <Box sx={theme => [\r\n *     { background: '#e5e5e5' },\r\n *     theme.applyStyles('dark', {\r\n *        background: '#1c1c1c',\r\n *        color: '#fff',\r\n *      }),\r\n *     ]}\r\n *   />\r\n * ```\r\n *\r\n * @example\r\n * 3. theming a component:\r\n * ```jsx\r\n *   extendTheme({\r\n *     components: {\r\n *       MuiButton: {\r\n *         styleOverrides: {\r\n *           root: ({ theme }) => [\r\n *             { background: '#e5e5e5' },\r\n *             theme.applyStyles('dark', {\r\n *               background: '#1c1c1c',\r\n *               color: '#fff',\r\n *             }),\r\n *           ],\r\n *         },\r\n *       }\r\n *     }\r\n *   })\r\n *```\r\n */\r\nexport default function applyStyles(key, styles) {\r\n  // @ts-expect-error this is 'any' type\r\n  const theme = this;\r\n  if (theme.vars && typeof theme.getColorSchemeSelector === 'function') {\r\n    // If CssVarsProvider is used as a provider,\r\n    // returns '* :where([data-mui-color-scheme=\"light|dark\"]) &'\r\n    const selector = theme.getColorSchemeSelector(key).replace(/(\\[[^\\]]+\\])/, '*:where($1)');\r\n    return {\r\n      [selector]: styles\r\n    };\r\n  }\r\n  if (theme.palette.mode === key) {\r\n    return styles;\r\n  }\r\n  return {};\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,WAAWA,CAACC,GAAG,EAAEC,MAAM,EAAE;EAC/C;EACA,MAAMC,KAAK,GAAG,IAAI;EAClB,IAAIA,KAAK,CAACC,IAAI,IAAI,OAAOD,KAAK,CAACE,sBAAsB,KAAK,UAAU,EAAE;IACpE;IACA;IACA,MAAMC,QAAQ,GAAGH,KAAK,CAACE,sBAAsB,CAACJ,GAAG,CAAC,CAACM,OAAO,CAAC,cAAc,EAAE,aAAa,CAAC;IACzF,OAAO;MACL,CAACD,QAAQ,GAAGJ;IACd,CAAC;EACH;EACA,IAAIC,KAAK,CAACK,OAAO,CAACC,IAAI,KAAKR,GAAG,EAAE;IAC9B,OAAOC,MAAM;EACf;EACA,OAAO,CAAC,CAAC;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}