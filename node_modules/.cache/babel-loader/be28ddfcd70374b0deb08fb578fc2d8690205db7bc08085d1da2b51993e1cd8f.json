{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nconst UNINITIALIZED = {};\n\n/**\r\n * A React.useRef() that is initialized lazily with a function. Note that it accepts an optional\r\n * initialization argument, so the initialization function doesn't need to be an inline closure.\r\n *\r\n * @usage\r\n *   const ref = useLazyRef(sortColumns, columns)\r\n */\nexport default function useLazyRef(init, initArg) {\n  const ref = React.useRef(UNINITIALIZED);\n  if (ref.current === UNINITIALIZED) {\n    ref.current = init(initArg);\n  }\n  return ref;\n}","map":{"version":3,"names":["React","UNINITIALIZED","useLazyRef","init","initArg","ref","useRef","current"],"sources":["C:/pft/project-finance-tracker-frontend/node_modules/@mui/utils/useLazyRef/useLazyRef.js"],"sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nconst UNINITIALIZED = {};\r\n\r\n/**\r\n * A React.useRef() that is initialized lazily with a function. Note that it accepts an optional\r\n * initialization argument, so the initialization function doesn't need to be an inline closure.\r\n *\r\n * @usage\r\n *   const ref = useLazyRef(sortColumns, columns)\r\n */\r\nexport default function useLazyRef(init, initArg) {\r\n  const ref = React.useRef(UNINITIALIZED);\r\n  if (ref.current === UNINITIALIZED) {\r\n    ref.current = init(initArg);\r\n  }\r\n  return ref;\r\n}"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,MAAMC,aAAa,GAAG,CAAC,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAUA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAChD,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAACL,aAAa,CAAC;EACvC,IAAII,GAAG,CAACE,OAAO,KAAKN,aAAa,EAAE;IACjCI,GAAG,CAACE,OAAO,GAAGJ,IAAI,CAACC,OAAO,CAAC;EAC7B;EACA,OAAOC,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}