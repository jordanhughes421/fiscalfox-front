{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const useAuth=()=>useContext(AuthContext);export const AuthProvider=_ref=>{let{children}=_ref;const[isLoggedIn,setIsLoggedIn]=useState(()=>{// Initial check to see if the user is logged in based on localStorage\nreturn localStorage.getItem('isLoggedIn')==='true';});const logout=()=>{// Use camelCase for functions\nlocalStorage.removeItem('token');// Remove token from storage\nlocalStorage.setItem('isLoggedIn',false);// Update isLoggedIn status\nsetIsLoggedIn(false);// Update state\n};// Ensure there's a function to update the isLoggedIn state based on localStorage\nconst login=token=>{localStorage.setItem('token',token);localStorage.setItem('isLoggedIn',true);setIsLoggedIn(true);// Update the context state\n};// Provide isLoggedIn and logout function through context\nreturn/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isLoggedIn,setIsLoggedIn,logout,login},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","isLoggedIn","setIsLoggedIn","localStorage","getItem","logout","removeItem","setItem","login","token","Provider","value"],"sources":["/Users/christopherkidd/Documents/fiscalfox-front/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\n    // Initial check to see if the user is logged in based on localStorage\n    return localStorage.getItem('isLoggedIn') === 'true';\n  });\n\n  const logout = () => { // Use camelCase for functions\n    localStorage.removeItem('token'); // Remove token from storage\n    localStorage.setItem('isLoggedIn', false); // Update isLoggedIn status\n    setIsLoggedIn(false); // Update state\n  };\n\n  // Ensure there's a function to update the isLoggedIn state based on localStorage\n  const login = (token) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('isLoggedIn', true);\n    setIsLoggedIn(true); // Update the context state\n  };\n\n  \n  \n\n  // Provide isLoggedIn and logout function through context\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, setIsLoggedIn, logout, login }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnE,KAAM,CAAAC,WAAW,cAAGL,aAAa,CAAC,IAAI,CAAC,CAEvC,MAAO,MAAM,CAAAM,OAAO,CAAGA,CAAA,GAAML,UAAU,CAACI,WAAW,CAAC,CAEpD,MAAO,MAAM,CAAAE,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,UAAU,CAAEC,aAAa,CAAC,CAAGT,QAAQ,CAAC,IAAM,CACjD;AACA,MAAO,CAAAU,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,GAAK,MAAM,CACtD,CAAC,CAAC,CAEF,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CAAE;AACrBF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC,CAAE;AAClCH,YAAY,CAACI,OAAO,CAAC,YAAY,CAAE,KAAK,CAAC,CAAE;AAC3CL,aAAa,CAAC,KAAK,CAAC,CAAE;AACxB,CAAC,CAED;AACA,KAAM,CAAAM,KAAK,CAAIC,KAAK,EAAK,CACvBN,YAAY,CAACI,OAAO,CAAC,OAAO,CAAEE,KAAK,CAAC,CACpCN,YAAY,CAACI,OAAO,CAAC,YAAY,CAAE,IAAI,CAAC,CACxCL,aAAa,CAAC,IAAI,CAAC,CAAE;AACvB,CAAC,CAKD;AACA,mBACEP,IAAA,CAACC,WAAW,CAACc,QAAQ,EAACC,KAAK,CAAE,CAAEV,UAAU,CAAEC,aAAa,CAAEG,MAAM,CAAEG,KAAM,CAAE,CAAAR,QAAA,CACvEA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}